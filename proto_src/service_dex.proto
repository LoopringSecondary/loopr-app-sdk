/*
 * Copyright 2018 Loopring Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
option java_multiple_files = true;
package io.lightcone.dex;

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

import "data_order.proto";
import "data_requests.proto";

/*
    We use `string` to represent amounts in two forms:
    1) full decimal string (FDS), i.e., "124567000000000000000"
    2) double value string (DVS), i.e., "123.45600"

*/
message DexConfigurations {
    uint64      dex_id                          = 1;
    string      dex_address                     = 2;
    string      deposit_fee_eth                 = 3;  // FDS
    string      onchain_withdrawal_fee_eth      = 4;  // FDS
    string      offchain_withdrawal_fee_eth     = 5;  // FDS
    string      order_cancellation_fee_eth      = 6;  // FDS
    bool        in_maintainance                 = 7;
}

message TokenInfo {
    uint32      id                              = 1;
    string      symbol                          = 2;
    string      address                         = 3;
    uint32      decimals                        = 4;
    string      status                          = 5;
}

message MarketInfo {
    uint64      id                              = 1;
    uint32      base_token_id                   = 2;
    uint32      base_token_symbol               = 3;
    uint32      quote_token_id                  = 4;
    uint32      quote_token_symbol              = 5;
    string      status                          = 6;
    string      price                           = 7;  // DVS
    string      price_fiat                      = 8;  // DVS
    string      volume                          = 9;  // DVS
    string      change                          = 10; // DVS
}

message MarketGroup {
    uint32              quote_token_id          = 1;
    repeated MarketInfo markets                 = 2;
}

message GetMarketsReq {
    map<uint32, TokenInfo> tokens               = 1;
    repeated MarketGroup   market_groups        = 2;
    string                 fiat_symbol          = 3;
    string                 sorting              = 4; // not supported yet
}

message GetMarketsRes {
    repeated MarketInfo markets                 = 1;
}

message TokenBalance {
    string      address                         = 1;
    string      symbol                          = 2;
    uint32      id                              = 3;
    string      balance                         = 4;  // FDS
    uint32      decimals                        = 5;
}

message Account {
    string      address                         = 1;
    uint64      account_id                      = 2;
    repeated TokenBalance balances              = 3;
}

message GetAvailableBalanceReq {
    uint64              account_id              = 1;
    repeated string     token_addresses         = 2;
}

message GetAvailableBalanceRes {
    repeated TokenBalance available_balances    = 1;
}

message Order {
    uint64      uuid                            = 1;
    bool        is_sell                         = 2;
    string      base_symbol                     = 3;
    string      base_amount                     = 4;  // DVS
    string      base_fill_amount                = 5;  // DVS
    string      quote_symbol                    = 6;
    string      quote_amount                    = 7;  // DVS
    string      quote_fill_amount               = 8;  // DVS
    string      status                          = 9;
    string      submitted_at                    = 10;
}

message GetUserOrdersReq {
    uint64      account_id                      = 1;
    string      base_token_id                   = 2;
    string      quote_token_id                  = 3;
    uint32      skip                            = 4;
    uint32      num                             = 5;
    repeated string statuses                    = 6;
}

message GetUserOrdersRes {
    repeated Order orders                       = 1;
}

message Fill {
    uint64      uuid                            = 1;
    uint64      order_uuid                      = 2;
    bool        is_taker                        = 3;
    bool        is_sell                         = 4;
    string      base_symbol                     = 5;
    string      base_fill_amount                = 6;  // DVS
    string      quote_symbol                    = 7;
    string      quote_fill_amount               = 8;  // DVS
    uint32      fill_percentage                 = 9;  // DVS
    uint64      timestamp                       = 10;
}

message UserTransfer {
    uint64      request_id                      = 1;
    uint64      account_id                      = 2;
    uint32      token_id                        = 3;
    string      token_symbol                    = 4;
    string      amount                          = 5;  // DVS
    uint64      submitted_at                    = 6;
    uint64      updated_at                      = 7;
    string      status                          = 8;
    string      transfer_type                   = 9;  // `deposit` or `withdrawal`
}

message GetUserFillsReq {
    uint64      account_id                      = 1;
    uint64      order_uuid                      = 2;
    uint32      skip                            = 3;
    uint32      num                             = 4;
}

message GetMarketFillsReq {
    uint64      market_id                       = 1; // 32bit base_token_id + 32bit quote_token_id
    uint32      num                             = 2;
}

message GetFillsRes {
    repeated Fill fills                         = 1;
}

message OrderBook {
    message Item {
        string  price                           = 1;  // DVS
        string  base_amount                     = 2;  // DVS
        string  quote_amount                    = 3;  // DVS
    }

    string          last_price                  = 1;  // DVS
    string          last_price_fiat             = 2;  // DVS
    repeated Item   sells                       = 3;
    repeated Item   buys                        = 4;
    string          base_symbol                 = 5;
    string          quote_symbol                = 6;
}

message GetOrderBookReq {
    uint64      market_id                       = 1; // 32bit base_token_id + 32bit quote_token_id
    uint32      aggregation_level               = 2;
    string      fiat_symbol                     = 3;
}

message Candles {
    message OHLC {
        repeated double     ohlc        = 1;
    }
    repeated OHLC           data        = 1;
}

message GetCandlesReq {
    string              market_id       = 1;
    string              kind            = 2;
    uint32              skip            = 3;
    uint32              num             = 4;
}

message GetUserTransfersReq {
    uint64      account_id              = 1;
    uint32      token_id                = 2;
    string      transfer_type           = 3;  // `deposit`, `withdrawal`, or "both"
    uint32      skip                    = 4;
    uint32      num                     = 5;
}

message GetUserTransfersRes {
    repeated UserTransfer transfers     = 1;
}

message GetNextOrderIdReq {
    uint64      account_id              = 1;
    uint32      token_id                = 2;
}

message SubmitOrderRes {
    Order               order           = 1;
}

message CancelOrderRes {
    repeated uint64    order_uuids      = 1;
}

message OffchainWithdrawalalRes {
    uint64              withdrwal_uuid  = 1;
}

message SimpleOrderCancellationReq {
    uint32              exchange_id         = 1;
    uint64              account_id          = 2;
    uint32              order_uuid          = 3;
    string              sig                = 20;
}

service DexService {
    // queries
    rpc getDexConfigurations(google.protobuf.Empty) returns (DexConfigurations);
    rpc getMarkets(GetMarketsReq)                   returns (GetMarketsRes);

    rpc getMarketFills(GetMarketFillsReq)           returns (GetFillsRes);
    rpc getOrderBook(GetOrderBookReq)               returns (OrderBook);
    rpc getCandles(GetCandlesReq)                   returns (Candles);


    rpc getAccount(google.protobuf.StringValue)     returns (Account);

    rpc getUserOrders(GetUserOrdersReq)             returns (GetUserOrdersRes);
    rpc getUserFills(GetUserFillsReq)               returns (GetFillsRes);
    rpc getUserTransfers(GetUserTransfersReq)       returns (GetUserTransfersRes);
    rpc getNextOrderId(GetNextOrderIdReq)           returns (google.protobuf.UInt32Value);

    // order operations
    rpc submitOrder(data.order.Order)
        returns (SubmitOrderRes);

    // Cancel orders by marking them obsoleted in database, not to be included in blocks.
    rpc cancelOrder(SimpleOrderCancellationReq)
        returns (CancelOrderRes);

    // Submit an offchain order cancellation request, will make into blocks.
    rpc submitOrderCancellation(data.requests.OrderCancellationRequest)
        returns (CancelOrderRes);

    // Submit an offchain withdrawal request, will make into blocks.
    rpc submitOffchainWithdrawal(data.requests.OffchainWithdrawalRequest)
        returns (OffchainWithdrawalalRes);
}
